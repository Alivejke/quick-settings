'use strict';

angular.module('app', ['app.services', 'app.directives', 'ngAnimate']);'use strict';

angular.module('app.controllers', ['app.services'])
    .controller('QuickSettingsCtrl', ['$scope', 'quickSettings', '$timeout', function($scope, quickSettings, $timeout) {
        // $scope.avaliableSettings = quickSettings.getAvaliableSettings();
        // $scope.activeSettings = quickSettings.getActiveSettings();
        $scope.settings = quickSettings.getSettings();

        $scope.avaliableSettings[2].selected = true;

        $scope.currentTime = (new Date).getTime();

        $scope.ctrls = {
            SET: 13,
            EXIT: 27,
            UP: 38,
            DOWN: 40,
            LEFT: 37,
            RIGHT: 39
        };

        $scope.animationBlock = false;
        function unblockAnimation (delay) {
            $timeout(function() {
                $scope.animationBlock = false;
            }, delay);
        }


        $scope.isOpen = false;
        $scope.toggleOpen = function() {
            $scope.isOpen = !$scope.isOpen;

            $scope.avaliableSettings = quickSettings.updateSettings($scope.activeSettings);
        };

        $scope.selectSetting = function() {
            // Second is always the active one
            var activeSetting = $scope.avaliableSettings[2];

            if(activeSetting.widget === 'slider') {
                $scope.applySettings();
            } else {
                $scope.toggleSetting(activeSetting.name);
                $scope.applySettings();
            }
        }

        $scope.discardSettings = function() {
            $scope.activeSettings = quickSettings.getSettings();
        }

        $scope.applySettings = function() {
            quickSettings.setSettings($scope.activeSettings);
        }

        $scope.toggleSetting = function (activeSettingName) {
            $scope.activeSettings[activeSettingName].active = !$scope.activeSettings[activeSettingName].active;
        }


        $scope.settingsPrev = function() {
            if($scope.animationBlock) return;
            $scope.animationBlock = true;

            $scope.avaliableSettings[2].selected = false;
            $scope.avaliableSettings[1].selected = true;

            var last = angular.copy($scope.avaliableSettings[$scope.avaliableSettings.length - 1]);            
            $scope.avaliableSettings.unshift(last);

            $timeout(function () {
                $scope.avaliableSettings.pop();
                unblockAnimation(300);
            }, 0);
        };

        $scope.settingsNext = function() {
            if($scope.animationBlock) return;
            $scope.animationBlock = true;

            $scope.avaliableSettings[2].selected = false;
            $scope.avaliableSettings[3].selected = true;

            var first = angular.copy( $scope.avaliableSettings[0] );            
            $scope.avaliableSettings.shift();

            $timeout(function () {
                $scope.avaliableSettings.push(first);
                unblockAnimation(300);
            }, 0);
        };

        $scope.switchSettingValue = function(direction) {
            var activeSetting = $scope.avaliableSettings[2],
                currIdx = activeSetting.items.indexOf($scope.activeSettings[activeSetting.name].active);

            if(direction === 'next') {
                currIdx++;
                if(currIdx >= activeSetting.items.length) {
                    currIdx = 0;
                }
            } else if(direction === 'prev') {
                currIdx--;
                if(currIdx < 0) {
                    currIdx = activeSetting.items.length - 1;
                }
            }

            $scope.activeSettings[activeSetting.name].active = activeSetting.items[currIdx];

            if(activeSetting.name === 'sleepTimer') {
                $scope.activeSettings[activeSetting.name].timestamp = (new Date ()).getTime();
            }
        };

    }]);'use strict';


angular.module('app.directives', ['app.controllers'])
    .directive('popupQuickSettings', ['$document', function($document) {
        return {
            restrict: 'E',
            replace: true,
            scope: true,
            controller: 'QuickSettingsCtrl',
            link: function(scope, element, attrs) {
                $document.bind('keydown', function (event) {
                    if(event.which === scope.ctrls.SET) {

                        if(scope.isOpen) {
                            scope.$apply(scope.selectSetting);
                        }

                        scope.$apply(scope.toggleOpen);

                    } else if(event.which === scope.ctrls.EXIT) {

                        if(scope.isOpen) {
                            scope.$apply(function() {
                                scope.toggleOpen();
                                scope.discardSettings();
                            });
                        }

                    } else if(event.which === scope.ctrls.UP) {

                        event.preventDefault();
                        scope.settingsPrev();
                        scope.$apply(scope.discardSettings);

                    } else if(event.which === scope.ctrls.DOWN) {

                        event.preventDefault();
                        scope.settingsNext();
                        scope.$apply(scope.discardSettings);

                    } else if(event.which === scope.ctrls.LEFT) {

                        event.preventDefault();
                        scope.$apply(scope.switchSettingValue('prev'));
                        
                    } else if(event.which === scope.ctrls.RIGHT) {

                        event.preventDefault();
                        scope.$apply(scope.switchSettingValue('next'));
                        
                    }
                });
            },
            templateUrl: 'template/popup_quick_settings.html'
        }
    }]);'use strict';
'use strict';

angular.module('app.services', ['LocalStorageModule'])
    .factory('quickSettings', ['localStorageService', function(lsService) {
        function getIdxByName(name, array) {
            var idx = -1;

            for (var i = array.length - 1; i >= 0; i--) {
                if(array[i].name === name) {
                    idx = i;
                }
            };

            return idx;
        }

        var callSign = 'WSCBS',
            channelNumber = 2,
            avaliableSettings: [
                {
                    name: 'recording',
                    textEnabled: 'Stop recording ' + callSign + ' ' + channelNumber + ' now',
                    textDisabled:'Start recording ' + callSign + ' ' + channelNumber + ' now'
                },
                {
                    name: 'favoriteChannel',
                    textEnabled: 'Remove ' + callSign + ' ' + channelNumber + ' from Favorites List',
                    textDisabled:'Add ' + callSign + ' ' + channelNumber + ' to Favorites List'
                },
                {
                    name: 'language',
                    text: 'Choose SAP language',
                    items: ['English', 'Español', 'Français'],
                    widget: 'slider'
                },
                {
                    name: 'sleepTimer',
                    text: 'Set Sleep Timer  (minutes)',
                    items: ['OFF', 5, 15, 30, 45, 60, 75, 90, 105, 120, 180, 240],
                    widget: 'slider',
                    showCurrent: true
                },
                {
                    name: 'parentalControl',
                    textEnabled: 'Turn OFF Parental Control',
                    textDisabled: 'Turn ON Parental Control'
                }
            ],
            activeSettings,
            factory = {
                setActiveSettings: function(activeSettings) {
                    lsService.set('quickSettings', activeSettings);
                },
                getSettings: function() {
                    var settings = helpers.extend(avaliableSettings, activeSettings);
                    return settings;
                },
                getAvaliableSettings: function () {
                    return avaliableSettings;
                },
                getActiveSettings: function () {
                    activeSettings = lsService.set('quickSettings');
                    return activeSettings;
                }/*,
                updateSettings: function (activeSettings) {
                    var updated = factory.avaliableSettings.slice();

                    if(activeSettings.sleepTimer.timestamp) {
                        var timepast = ( new Date() - new Date(activeSettings.sleepTimer.timestamp) ) / 1000 / 60,
                            timeleft = parseInt(activeSettings.sleepTimer.active - timepast);
                        
                        if(timeleft > 0) {
                            var sleepTimerIdx = getIdxByName('sleepTimer', updated);
                            updated[sleepTimerIdx].items.push(timeleft);
                            updated[sleepTimerIdx].items.sort(function(a, b) {return a - b;});
                            activeSettings.sleepTimer.active = timeleft;
                            activeSettings.sleepTimer.timestamp = new Date();
                        } else {
                            activeSettings.sleepTimer.active = 'OFF';
                        }

                        this.setSettings(activeSettings);
                    }

                    return updated;
                }*/
            },
            activeSettings = factory.getSettings();

        if( !activeSettings ) {
            factory.setSettings({
                recording: {
                    active: false
                },
                favoriteChannel: {
                    active: false
                },
                language: {
                    active: 'English'
                },
                sleepTimer: {
                    active: 'OFF',
                    timestamp: null
                },
                parentalControl: {
                    active: false
                }
            });
        }

        return factory;
    }]);angular.module('app').run(['$templateCache', function($templateCache) {
  'use strict';

  $templateCache.put('template/popup_quick_settings.html',
    "<div class=\"popup_wrap\" ng-show=\"isOpen\">\r" +
    "\n" +
    "    <div class=\"popup_fone\"></div>\r" +
    "\n" +
    "\r" +
    "\n" +
    "    <section class=\"popup_window popup_quick_settings\">\r" +
    "\n" +
    "        <header class=\"quick_settings_header\">\r" +
    "\n" +
    "            <h1 class=\"quick_settings_title\">Quick Settings</h1>\r" +
    "\n" +
    "            <div class=\"quick_settings_descr\">Highlight an option, then press SELECT</div>\r" +
    "\n" +
    "        </header>\r" +
    "\n" +
    "        \r" +
    "\n" +
    "        <section class=\"quick_settings_content\">\r" +
    "\n" +
    "            <ul class=\"quick_settings_list\">\r" +
    "\n" +
    "                <li \r" +
    "\n" +
    "                    class=\"quick_settings_item {{'idx_'+ $index}} {{setting.selected ? 'selected' : ''}} {{setting.widget === 'slider' ? ' inner_' + setting.widget : ''}}\"\r" +
    "\n" +
    "                    ng-repeat=\"setting in avaliableSettings | limitTo:5\" \r" +
    "\n" +
    "                    ng-switch=\"setting.widget\"\r" +
    "\n" +
    "                >\r" +
    "\n" +
    "                    <span class=\"quick_settings_item_name\" ng-switch-default=\"\">\r" +
    "\n" +
    "                        {{activeSettings[setting.name].active ? setting.textEnabled : setting.textDisabled}}\r" +
    "\n" +
    "                    </span>\r" +
    "\n" +
    "\r" +
    "\n" +
    "                    <span class=\"quick_settings_item_name\" ng-switch-when=\"slider\">\r" +
    "\n" +
    "                        {{setting.text}}\r" +
    "\n" +
    "                    </span>\r" +
    "\n" +
    "\r" +
    "\n" +
    "                    <span class=\"quick_settings_item_value\" ng-if=\"setting.showCurrent && activeSettings[setting.name].active != 'OFF'\">\r" +
    "\n" +
    "                        {{activeSettings[setting.name].active}}\r" +
    "\n" +
    "                    </span>\r" +
    "\n" +
    "\r" +
    "\n" +
    "                    <div class=\"quick_settings_value_block\" ng-switch-when=\"slider\">\r" +
    "\n" +
    "                        <ul class=\"quick_settings_value_list\">\r" +
    "\n" +
    "                            <li class=\"quick_settings_value_item {{activeSettings[setting.name].active === item ? 'active' : ''}}\" ng-repeat=\"item in setting.items\">\r" +
    "\n" +
    "                                {{item}}\r" +
    "\n" +
    "                            </li>\r" +
    "\n" +
    "                        </ul>\r" +
    "\n" +
    "\r" +
    "\n" +
    "                        <button class=\"quick_settings_value_item_prev\" ng-click=\"switchSettingValue('prev')\"></button>\r" +
    "\n" +
    "                        <button class=\"quick_settings_value_item_next\" ng-click=\"switchSettingValue('next')\"></button>\r" +
    "\n" +
    "                    </div>\r" +
    "\n" +
    "                </li>\r" +
    "\n" +
    "            </ul>\r" +
    "\n" +
    "\r" +
    "\n" +
    "            <button class=\"quick_settings_item_prev\" ng-click=\"settingsPrev()\"></button>\r" +
    "\n" +
    "            <button class=\"quick_settings_item_next\" ng-click=\"settingsNext()\"></button>\r" +
    "\n" +
    "        </section>\r" +
    "\n" +
    "\r" +
    "\n" +
    "        <footer class=\"quick_settings_footer\">\r" +
    "\n" +
    "            <button class=\"button button_set\">\r" +
    "\n" +
    "                <i>SET</i>\r" +
    "\n" +
    "                More Settings\r" +
    "\n" +
    "            </button>\r" +
    "\n" +
    "            <button class=\"button button_exit\">\r" +
    "\n" +
    "                <i>EXIT</i>\r" +
    "\n" +
    "                Return to TV\r" +
    "\n" +
    "            </button>\r" +
    "\n" +
    "        </footer>\r" +
    "\n" +
    "    </section>\r" +
    "\n" +
    "</div>\r" +
    "\n"
  );

}]);
